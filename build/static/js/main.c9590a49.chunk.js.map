{"version":3,"sources":["components/NoteText/NoteText.module.css","components/BoxItem/BoxItem.module.css","components/StorageBoxesContainer/StorageBoxesContainer.module.css","components/ContentSelector/ContentSelector.module.css","components/NewBoxPopUp/NewBoxPopUp.module.css","components/AddText/addText.module.css","components/TestingInitLocalStorage/Testing.module.css","components/WelcomeHeader/index.js","hooks/dbFunctions.js","components/NewBoxPopUp/index.js","components/TestingInitLocalStorage/index.js","components/ContentSelector/index.js","components/AddText/index.js","components/NoteText/index.js","components/BoxItem/index.js","components/StorageBoxesContainer/index.js","pages/Home/index.js","App.js","index.js"],"names":["module","exports","WelcomeHeader","className","returnUniqueNum","arrayOfIds","range","length","sort","a","b","i","startNum","error","console","log","NewBoxPopUp","onExitPopUp","onCreate","useState","title","setTitle","NewBoxPopUpCSS","container","popupExit","onClick","onChange","e","event","value","target","handledChange","placeholder","createBtn","informationString","localStorage","getItem","informationParsed","JSON","parse","newArray","boxId","content","setItem","stringify","newBox","map","box","push","addToDB","TestingInitLocalStorage","onInit","onDeleteAll","TestingModuleCSS","render_box","explaination","ContentSelector","createHeader","createText","cancelBtn","ContentSelectorCSS","btn","AddText","handleSave","contentType","text","closeBtn","textarea","setTextareaState","addTextCSS","defaultValue","handleInput","updatedArray","id","note","noteId","header","updateDB","NoteText","unRender","elementState","textState","setTextState","editIsActive","setEditIsActive","editingText","setEditingText","editorClass","useRef","useEffect","current","NoteTextCSS","editingTextarea","editingHeading","pTag","elementLayout","split","element","pTagContainer","hTag","headingTag","contentChecker","style","height","transition","scrollHeight","stopPropagation","window","confirm","updatedText","updatedNotes","filter","BoxItem","deleteBox","BoxItemCSS","storageBox","classList","setClassList","isOpen","setIsOpen","boxState","setBoxState","newComponent","setNewComponentState","workingContentArray","setWorkingContentArray","noteTextBuilder","handleSelectorCancel","notes","deleteFromArray","deleteId","newContentArray","state","storageBoxOpen","contentContainer","newNoteContent","StorageBoxesContainer","boxesState","setBoxesState","boxesComponentState","setBoxesComponentState","renderAddNewPopUp","setRenderAddNewPopUp","setStorageBoxes","getComponents","components","handleBoxDelete","handleExitPopUp","array","delBoxId","updatedStorageBoxes","StorageBoxesContainerCSS","information","plus","verticalLine","horizontalLine","Home","App","component","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9590a49.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NoteText_container__12p5y\",\"editingTextarea\":\"NoteText_editingTextarea__15-XJ\",\"editingHeading\":\"NoteText_editingHeading__3g_4J\",\"btn\":\"NoteText_btn__2kuZ-\",\"pTagContainer\":\"NoteText_pTagContainer__3rAj8\",\"pTag\":\"NoteText_pTag__2HSqE\",\"headingTag\":\"NoteText_headingTag__1XIH2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"storageBox\":\"BoxItem_storageBox__zKccM\",\"storageBoxOpen\":\"BoxItem_storageBoxOpen__2VSCL\",\"contentContainer\":\"BoxItem_contentContainer__Kx3f2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"StorageBoxesContainer_container__3qLn9\",\"btn\":\"StorageBoxesContainer_btn__1cAix\",\"plus\":\"StorageBoxesContainer_plus__1Bd4u\",\"verticalLine\":\"StorageBoxesContainer_verticalLine__7PvI3\",\"horizontalLine\":\"StorageBoxesContainer_horizontalLine__2_-SL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContentSelector_container__1kS6F\",\"btn\":\"ContentSelector_btn__rzjdQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NewBoxPopUp_container__1kQhD\",\"popupExit\":\"NewBoxPopUp_popupExit__252XB\",\"createBtn\":\"NewBoxPopUp_createBtn__HfHZT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"addText_container__3bYYy\",\"btn\":\"addText_btn__2LYw1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Testing_text__2E41j\",\"explaination\":\"Testing_explaination__3eyU6\",\"render_box\":\"Testing_render_box__3WBRt\"};","import React from \"react\";\r\nimport \"./WelcomeHeader.css\";\r\n\r\nexport default function WelcomeHeader() {\r\n  return (\r\n    <div className=\"welcome-header\">\r\n      <h1>Welcome</h1>\r\n    </div>\r\n  );\r\n}\r\n","export function returnUniqueNum(arrayOfIds) {\r\n  //Argument take a max range and an array\r\n  let range = arrayOfIds.length;\r\n\r\n  if (range === 0) {\r\n    return 0;\r\n  }\r\n\r\n  //Sort the array\r\n  // console.log(\"Before Sort\",arrayOfIds)\r\n  arrayOfIds.sort(function (a, b) {\r\n    return a - b;\r\n  });\r\n  // console.log(\"After Sort\",arrayOfIds);\r\n\r\n  try {\r\n    for (let i = 0; i < range; i++) {\r\n      // console.log(arrayOfIds[i]);\r\n      //The first in check Num\r\n      const startNum = arrayOfIds[i] + 1;\r\n      if (arrayOfIds[0] === 1) {\r\n        return 0;\r\n      }\r\n      //The num we are checking against\r\n      const nextNum = arrayOfIds[i + 1];\r\n      if (startNum !== nextNum) {\r\n        return startNum;\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\n// let arrayOfIds = [8, 0, 1, 2, 7, 3, 5, 4,6,11,13,14,15,17,9,10,12,16,18];\r\n\r\n// // console.log(\"\\n====\\nFINAL\\n====\\n\", returnUniqueNum(arrayOfIds, 1000));\r\n// console.log(returnUniqueNum(arrayOfIds));\r\n","import React, { useState } from \"react\";\r\nimport { returnUniqueNum } from \"../../hooks/dbFunctions\";\r\nimport NewBoxPopUpCSS from \"./NewBoxPopUp.module.css\";\r\n\r\nexport default function NewBoxPopUp({ onExitPopUp, onCreate }) {\r\n  const [title, setTitle] = useState(\"\");\r\n  //Update State\r\n  const handledChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    setTitle(value);\r\n  };\r\n\r\n  //Read and Edit Json as of Now but in future Google docs and then Mongo or MySQL\r\n  const addToDB = () => {\r\n    const informationString = localStorage.getItem(\"StorageBoxes\");\r\n    const informationParsed = JSON.parse(informationString);\r\n\r\n    //Gets the id of last item stored in local Storage -- Temporary --\r\n    // console.log(\"information parsed\", informationParsed.boxId);\r\n    //If localStorage empty\r\n    if (informationParsed === null) {\r\n      const newID = 0;\r\n      const newArray = [{ boxId: newID, title: title, content: [] }];\r\n      localStorage.setItem(\"StorageBoxes\", JSON.stringify(newArray));\r\n    } else {\r\n      //Else local storage exists\r\n      const idArray = informationParsed.map((box) => {\r\n        return box.boxId;\r\n      });\r\n      const newID = returnUniqueNum(idArray);\r\n\r\n      //New Box/List Item\r\n      // console.log(newID);\r\n      const newBox = { boxId: newID, title: title, content: [] };\r\n      \r\n      informationParsed.push(newBox);\r\n      //Send back to localStorage\r\n      localStorage.setItem(\"StorageBoxes\", JSON.stringify(informationParsed));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={NewBoxPopUpCSS.container}>\r\n      <button className={NewBoxPopUpCSS.popupExit} onClick={onExitPopUp}>\r\n        X\r\n      </button>\r\n      <input\r\n        onChange={(e) => {\r\n          handledChange(e);\r\n        }}\r\n        placeholder=\"Title\"\r\n      ></input>\r\n      <button\r\n        className={NewBoxPopUpCSS.createBtn}\r\n        onClick={() => {\r\n          addToDB();\r\n          onCreate();\r\n        }}\r\n      >\r\n        <p>Create New Box</p>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport TestingModuleCSS from \"./Testing.module.css\";\r\nimport information from \"../../Information.json\";\r\n\r\nexport default function TestingInitLocalStorage({ onInit, onDeleteAll }) {\r\n  //Init LocalStorage\r\n  const initLocalStorage = () => {\r\n    localStorage.setItem(\"StorageBoxes\", JSON.stringify(information));\r\n  };\r\n  return (\r\n    <>\r\n      <button onClick={onInit} className={TestingModuleCSS.render_box}>\r\n        <strong>RenderDemo</strong>\r\n      </button>\r\n      <p className={TestingModuleCSS.explaination}>\r\n        This will delete any currently saved boxes\r\n      </p>\r\n      {/* <button\r\n        onClick={() => {\r\n          initLocalStorage();\r\n          onInit();\r\n        }}\r\n        className={TestingModuleCSS.text}\r\n      >\r\n        RESET LOCAL STORAGE\r\n      </button>\r\n      <button onClick={onDeleteAll} className={TestingModuleCSS.text}>\r\n        Delete All\r\n      </button> */}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ContentSelectorCSS from \"./ContentSelector.module.css\";\r\n\r\nexport default function ContentSelector({\r\n  createHeader,\r\n  createText,\r\n  cancelBtn,\r\n}) {\r\n  return (\r\n    <div className={ContentSelectorCSS.container}>\r\n      <button onClick={createHeader} className={ContentSelectorCSS.btn}>\r\n        H\r\n      </button>\r\n      <button onClick={createText} className={ContentSelectorCSS.btn}>\r\n        T\r\n      </button>\r\n      <button onClick={cancelBtn} className={ContentSelectorCSS.btn}>\r\n        X\r\n      </button>\r\n      {/* <div className={ContentSelectorCSS.headerBtn}></div> */}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport addTextCSS from \"./addText.module.css\";\r\nimport { returnUniqueNum } from \"../../hooks/dbFunctions\";\r\n\r\nexport default function AddText({\r\n  boxId,\r\n  handleSave,\r\n  contentType,\r\n  text,\r\n  closeBtn,\r\n}) {\r\n  const [textarea, setTextareaState] = useState(text);\r\n\r\n\r\n  const handleInput = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    setTextareaState(value);\r\n  };\r\n\r\n  //Take text area and add to contents array\r\n  const updateDB = () => {\r\n    //Get INformation from db\r\n    const storageBoxes = JSON.parse(localStorage.getItem(\"StorageBoxes\"));\r\n    // console.log(\"StorageBoxes\", storageBoxes);\r\n    //Finds the note we are looking for then checks what type we are adding\r\n    const updatedArray = storageBoxes.map((box) => {\r\n      //If the current box we are in matches the current box in loop\r\n      if (box.boxId === boxId) {\r\n        //Build Id of notes\r\n        const noteIdArray = box.content.map((note) => {\r\n          return note.noteId;\r\n        });\r\n        // console.log(\"noteIdArray: \", noteIdArray);\r\n\r\n        const id = returnUniqueNum(noteIdArray);\r\n        \r\n        //pass child to parent \\[textarea, id]\r\n        //\r\n        handleSave({\"noteId\":id,\"text\":textarea});\r\n\r\n        if (contentType === \"heading\") {\r\n          box.content.push({ noteId: id, header: textarea });\r\n        } else if (contentType === \"text\") {\r\n          box.content.push({ noteId: id, text: textarea });\r\n        }\r\n      }\r\n\r\n      return box;\r\n    });\r\n\r\n    localStorage.setItem(\"StorageBoxes\", JSON.stringify(updatedArray));\r\n  };\r\n\r\n  //Click\r\n  const handleClick = () => {\r\n    updateDB();\r\n  };\r\n  return (\r\n    <div className={addTextCSS.container}>\r\n      <textarea\r\n        defaultValue={textarea}\r\n        onChange={(e) => {\r\n          handleInput(e);\r\n        }}\r\n      ></textarea>\r\n      <button onClick={handleClick} className={addTextCSS.btn}>\r\n        Save\r\n      </button>\r\n      <button onClick={closeBtn} className={addTextCSS.btn}>\r\n        X\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport NoteTextCSS from \"./NoteText.module.css\";\r\n\r\nexport default function NoteText({ content, contentType, unRender }) {\r\n  const [elementState, setElementState] = useState(contentType);\r\n  const [textState, setTextState] = useState(content.text);\r\n  const [editIsActive, setEditIsActive] = useState(false);\r\n  const [editingText, setEditingText] = useState(content.text);\r\n  let editorClass = useRef();\r\n\r\n  useEffect(() => {\r\n    //Init Header or Text for note box\r\n\r\n    if (contentType === \"text\") {\r\n      editorClass.current = NoteTextCSS.editingTextarea;\r\n    } else if (contentType === \"heading\" || contentType === \"title\") {\r\n      editorClass.current = NoteTextCSS.editingHeading;\r\n    }\r\n  }, []);\r\n\r\n  // // Sets note Type\r\n  // const setNote = () => {\r\n  //   if (contentType === \"heading\") {\r\n  //     setElementState(\"hTag\");\r\n  //   } else if (contentType === \"text\") {\r\n  //     setElementState(\"pTag\");\r\n  //   } else if (contentType === \"title\") {\r\n  //     setElementState(\"title\");\r\n  //   }\r\n  // };\r\n\r\n  const contentChecker = () => {\r\n    //switch statement would work better i think\r\n    if (elementState === \"editor\") {\r\n      return;\r\n    } else if (elementState === \"heading\") {\r\n      return hTag;\r\n    } else if (elementState === \"text\") {\r\n      return pTag();\r\n    } else if (elementState === \"title\") {\r\n      return title;\r\n    }\r\n  };\r\n\r\n  //\r\n  const handleSave = (updatedText) => {\r\n    setTextState(updatedText);\r\n\r\n    //Get INformation from db\r\n    const storageBoxes = JSON.parse(localStorage.getItem(\"StorageBoxes\"));\r\n\r\n    //Finds the note we are looking for then checks what type we are adding\r\n    const updatedArray = storageBoxes.map((box) => {\r\n      //If the current box we are in matches the current box in loop\r\n      if (box.boxId === content.boxId) {\r\n        //If its the title element\r\n        if (contentType === \"title\") {\r\n          //change title to what was edited\r\n          box.title = updatedText;\r\n          console.log(\"box\", box);\r\n          //return box to the array\r\n          return box;\r\n        } else {\r\n          const updatedNotes = box.content.map((note) => {\r\n            if (note.noteId === content.noteId) {\r\n              if (contentType === \"heading\") {\r\n                return { noteId: content.noteId, header: updatedText };\r\n              } else if (contentType === \"text\") {\r\n                return { noteId: content.noteId, text: updatedText };\r\n              }\r\n            } else {\r\n              return note;\r\n            }\r\n          });\r\n          box.content = updatedNotes;\r\n        }\r\n        //Build Id of notes\r\n      }\r\n      return box;\r\n    });\r\n\r\n    localStorage.setItem(\"StorageBoxes\", JSON.stringify(updatedArray));\r\n\r\n    // setElementState(<p>{updatedText}</p>);\r\n  };\r\n\r\n  const editingTextUpdater = (text) => {\r\n    setEditingText(text);\r\n  };\r\n\r\n  // Handle Item Click For Editing a box\r\n  const handleClick = () => {\r\n    setEditIsActive(true);\r\n  };\r\n\r\n  const pTag = () => {\r\n    // console.log(content.noteId)\r\n    let array = textState.split(\"\\n\");\r\n\r\n    const elementLayout = array.map((element, i) => {\r\n      return (\r\n        <p className={NoteTextCSS.pTag} key={i}>\r\n          {element}\r\n        </p>\r\n      );\r\n    });\r\n    return <div className={NoteTextCSS.pTagContainer}>{elementLayout}</div>;\r\n    return <p className={NoteTextCSS.text}> {textState}</p>;\r\n  };\r\n  const hTag = <h2 className={NoteTextCSS.headingTag}>{textState}</h2>;\r\n\r\n  const title = <h1 className={NoteTextCSS.title}>{textState}</h1>;\r\n\r\n  const handleDelete = () => {\r\n    //Definitaly not dry but you get the point ok\r\n    //Get INformation from db\r\n    const storageBoxes = JSON.parse(localStorage.getItem(\"StorageBoxes\"));\r\n\r\n    //Finds the note we are looking for then checks what type we are adding\r\n    const updatedArray = storageBoxes.map((box) => {\r\n      //If the current box we are in matches the current box in loop\r\n\r\n      if (box.id === content.boxId) {\r\n        //If its the title element\r\n\r\n        const updatedNotes = box.content.filter((note) => {\r\n          if (note.noteId === content.noteId) {\r\n            return;\r\n          } else {\r\n            return note;\r\n          }\r\n        });\r\n        box.content = updatedNotes;\r\n\r\n        //Build Id of notes\r\n      }\r\n      return box;\r\n    });\r\n\r\n    localStorage.setItem(\"StorageBoxes\", JSON.stringify(updatedArray));\r\n    unRender(content.noteId);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div onClick={handleClick} className={NoteTextCSS.container}>\r\n        {!editIsActive && contentChecker()}\r\n        {editIsActive && (\r\n          <>\r\n            <p>Editing</p>\r\n            <textarea\r\n              // onClick={(e) => handleClick(e)}\r\n              id={`note-${content.noteId}`}\r\n              style={{ height: \"100%\", transition: \"1s ease-in-out\" }}\r\n              className={`${editorClass.current}`}\r\n              onChange={(e) => {\r\n                editingTextUpdater(e.target.value);\r\n                e.target.style.height = null;\r\n                e.target.style.height = `${e.target.scrollHeight}px`;\r\n              }}\r\n              defaultValue={textState}\r\n            ></textarea>\r\n            <br />\r\n            <button\r\n              className={NoteTextCSS.btn}\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n                if (editingText !== textState) {\r\n                  let answer = window.confirm(\r\n                    \"You didnt save are you sure you want to close the editor without saving??\"\r\n                  );\r\n                  if (answer) {\r\n                    setEditIsActive(false);\r\n                    setEditingText(textState);\r\n                  } else {\r\n                    setEditIsActive(true);\r\n                  }\r\n                } else {\r\n                  setEditIsActive(false);\r\n                }\r\n              }}\r\n            >\r\n              Close Editor\r\n            </button>\r\n            <button\r\n              className={NoteTextCSS.btn}\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n                handleSave(editingText);\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n            {contentType !== \"title\" && (\r\n              <button onClick={handleDelete} className={NoteTextCSS.btn}>\r\n                Delete\r\n              </button>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport BoxItemCSS from \"../BoxItem/BoxItem.module.css\";\r\nimport ContentSelector from \"../ContentSelector\";\r\nimport AddText from \"../AddText\";\r\nimport NoteText from \"../NoteText\";\r\n\r\n// Single Stored Box that contains a collection of\r\n//info consists of the Text Headings and Title of each Box Stored\r\nexport default function BoxItem({ content, deleteBox }) {\r\n  const [classList, setClassList] = useState(`${BoxItemCSS.storageBox}`);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [boxState, setBoxState] = useState(content);\r\n  const [newComponent, setNewComponentState] = useState();\r\n  const [workingContentArray, setWorkingContentArray] = useState([]);\r\n\r\n  useEffect(() => {\r\n    noteTextBuilder();\r\n  }, [boxState]);\r\n  //Handles Open for Box clicked\r\n  const handleClick = () => {\r\n    //If box is closed Open It\r\n    if (isOpen) return;\r\n\r\n    setClassList(`${BoxItemCSS.storageBox} ${BoxItemCSS.storageBoxOpen}`);\r\n    setIsOpen(true);\r\n    noteTextBuilder();\r\n\r\n    //If box is able to be opened and is open\r\n  };\r\n\r\n  const handleExit = () => {\r\n    if (isOpen) {\r\n      setClassList(`${BoxItemCSS.storageBox} `);\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  //On Submit of new Header Element from the Content Selector Component\r\n  const handleHeadingBtn = () => {\r\n    setNewComponentState(\r\n      <AddText\r\n        contentType={\"heading\"}\r\n        boxId={content.boxId}\r\n        handleSave={(newNoteContent) => {\r\n          const newContentArray = boxState.content;\r\n          newContentArray.push({\r\n            noteId: newNoteContent.noteId,\r\n            header: newNoteContent.text,\r\n          });\r\n          setBoxState((state) => ({\r\n            ...state,\r\n            content: newContentArray,\r\n          }));\r\n          handleSelectorCancel();\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  //On Submit of new Text element\r\n  const handleTextBtn = () => {\r\n    setNewComponentState(\r\n      <AddText\r\n        contentType={\"text\"}\r\n        boxId={content.boxId}\r\n        handleSave={(newNoteContent) => {\r\n          const newContentArray = boxState.content;\r\n          newContentArray.push({\r\n            noteId: newNoteContent.noteId,\r\n            text: newNoteContent.text,\r\n          });\r\n          setBoxState((state) => ({\r\n            ...state,\r\n            content: newContentArray,\r\n          }));\r\n          handleSelectorCancel();\r\n          console.log(\"Save btn End\");\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleSelectorCancel = () => {\r\n    setNewComponentState(null);\r\n  };\r\n\r\n  //\r\n  const noteTextBuilder = () => {\r\n    if (boxState.content) {\r\n      const notes = boxState.content.map((note) => {\r\n        let contentType = \"\";\r\n        let text = \"\";\r\n        if (note.header) {\r\n          contentType = \"heading\";\r\n          text = note.header;\r\n        } else if (note.text) {\r\n          contentType = \"text\";\r\n          text = note.text;\r\n        }\r\n        return (\r\n          <NoteText\r\n            id={`box-${boxState.boxId}-note-${note.noteId}`}\r\n            key={note.noteId}\r\n            contentType={contentType}\r\n            content={{\r\n              text: text,\r\n              boxId: boxState.boxId,\r\n              noteId: note.noteId,\r\n            }}\r\n            unRender={deleteFromArray}\r\n          />\r\n        );\r\n      });\r\n\r\n      setWorkingContentArray(notes);\r\n    }\r\n  };\r\n\r\n  const deleteFromArray = (deleteId) => {\r\n    //When a note hits a delete button loop through content array and remove that note\r\n\r\n    const newContentArray = boxState.content.filter((note) => {\r\n      console.log(note.noteId);\r\n      if (note.noteId === deleteId) {\r\n        return;\r\n      } else {\r\n        return note;\r\n      }\r\n    });\r\n    //This updates the content state array with new and old information\r\n    setBoxState((state) => ({\r\n      ...state,\r\n      content: newContentArray,\r\n    }));\r\n  };\r\n\r\n  //User Create Box item\r\n  return (\r\n    <div onClick={handleClick} className={classList}>\r\n      {!isOpen && (\r\n        <>\r\n          <h2\r\n            onClick={(e) => {\r\n              e.stopPropagation()\r\n              \r\n              deleteBox(boxState);\r\n            }}\r\n          >\r\n            ...Delete\r\n          </h2>\r\n          <h1>{boxState.title}</h1>\r\n        </>\r\n      )}\r\n      {isOpen && (\r\n        <>\r\n          <button onClick={handleExit}>X</button>\r\n          <NoteText\r\n            key=\"title\"\r\n            contentType=\"title\"\r\n            content={{ text: boxState.title, boxId: boxState.boxId }}\r\n          />\r\n          {boxState.content ? (\r\n            <div className={BoxItemCSS.contentContainer}>\r\n              {workingContentArray}\r\n              {isOpen && (\r\n                <ContentSelector\r\n                  createHeader={handleHeadingBtn}\r\n                  createText={handleTextBtn}\r\n                  cancelBtn={handleSelectorCancel}\r\n                />\r\n              )}\r\n              {newComponent}\r\n            </div>\r\n          ) : null}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport NewBoxPopUp from \"../NewBoxPopUp\";\r\nimport StorageBoxesContainerCSS from \"./StorageBoxesContainer.module.css\";\r\nimport BoxItemCSS from \"../BoxItem/BoxItem.module.css\";\r\nimport TestingInitLocalStorage from \"../TestingInitLocalStorage\";\r\nimport BoxItem from \"../BoxItem\";\r\nimport information from \"../../Information.json\";\r\n\r\nexport default function StorageBoxesContainer() {\r\n  //Shitty Name\r\n  const [boxesState, setBoxesState] = useState([]);\r\n  const [boxesComponentState, setBoxesComponentState] = useState([]);\r\n  const [renderAddNewPopUp, setRenderAddNewPopUp] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setStorageBoxes();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Change BoxState\");\r\n    getComponents();\r\n  }, [boxesState]);\r\n\r\n  const initLocalStorage = () => {\r\n    localStorage.setItem(\"StorageBoxes\", JSON.stringify(information));\r\n    setStorageBoxes();\r\n  };\r\n\r\n  const getComponents = () => {\r\n    if (boxesState !== null) {\r\n      const components = boxesState.map((box, i) => {\r\n        return (\r\n          <BoxItem key={box.boxId} content={box} deleteBox={handleBoxDelete} />\r\n        );\r\n      });\r\n      console.log(components);\r\n      setBoxesComponentState(components);\r\n    }\r\n  };\r\n  // const addStorageBoxToContainer\r\n  const handleAddStorageBtnClick = () => {\r\n    setRenderAddNewPopUp(true);\r\n  };\r\n\r\n  const handleExitPopUp = () => {\r\n    setRenderAddNewPopUp(false);\r\n  };\r\n  // Update Information Boxes State and local Storage\r\n  const setStorageBoxes = () => {\r\n    const array = JSON.parse(localStorage.getItem(\"StorageBoxes\"));\r\n\r\n    setBoxesState(array);\r\n    getComponents();\r\n  };\r\n\r\n  //Clear LocalStorage\r\n  const clearLocalStorage = () => {\r\n    localStorage.removeItem(\"StorageBoxes\");\r\n    setBoxesState([]);\r\n  };\r\n\r\n  const handleBoxDelete = (delBoxId) => {\r\n    // console.log(delBoxId);\r\n    //Handles DB interaction\r\n    // const storageBoxes = JSON.parse(localStorage.getItem(\"StorageBoxes\"));\r\n    const updatedStorageBoxes = boxesState.filter((box) => {\r\n      if (box.boxId === delBoxId.boxId) {\r\n        return;\r\n        // console.log(\"Box.BoxId if\", box.boxId);\r\n      } else {\r\n        // console.log(\"Box.BoxId else\", box.boxId);\r\n        return box;\r\n      }\r\n    });\r\n\r\n    setBoxesState(updatedStorageBoxes);\r\n    getComponents();\r\n\r\n    localStorage.setItem(\"StorageBoxes\", JSON.stringify(updatedStorageBoxes));\r\n  };\r\n\r\n  return (\r\n    <div className={StorageBoxesContainerCSS.container}>\r\n      <div className={BoxItemCSS.storageBox}>\r\n        <TestingInitLocalStorage onInit={initLocalStorage} />\r\n      </div>\r\n      {/* Add Storage Box */}\r\n      <button onClick={handleAddStorageBtnClick}>\r\n        <div className={BoxItemCSS.storageBox}>\r\n          <div className={StorageBoxesContainerCSS.plus}>\r\n            <div className={StorageBoxesContainerCSS.verticalLine}></div>\r\n            <div className={StorageBoxesContainerCSS.horizontalLine}></div>\r\n          </div>\r\n        </div>\r\n      </button>\r\n      {renderAddNewPopUp && (\r\n        <NewBoxPopUp\r\n          onExitPopUp={handleExitPopUp}\r\n          onCreate={() => {\r\n            setStorageBoxes();\r\n            handleExitPopUp();\r\n          }}\r\n        />\r\n      )}\r\n      {/*Displays ALl the Stored Boxes ^^^*/}\r\n      {boxesComponentState}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\r\nimport StorageBoxesContainer from \"../../components/StorageBoxesContainer\";\r\n\r\n\r\nexport default function Home() {\r\n\r\n\r\n  return (\r\n    <>\r\n      <WelcomeHeader />\r\n      <StorageBoxesContainer />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route component={Home} exact path=\"/\" />\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}